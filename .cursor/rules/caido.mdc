---
description:
globs:
alwaysApply: true
---
Attaching some of the most important Caido SDK types for context:

/**
   * An immutable saved Request.
   *
   * To modify, use `toSpec` to get a `RequestSpec` object.
   * @category Requests
   */
  export type Request = {
    /**
     * The unique Caido {@link ID} of the request.
     */
    getId(): ID;
    /**
     * The target host of the request.
     */
    getHost(): string;
    /**
     * The target port of the request.
     */
    getPort(): number;
    /**
     * If the request uses TLS (HTTPS).
     */
    getTls(): boolean;
    /**
     * The HTTP method of the request.
     */
    getMethod(): string;
    /**
     * The path of the request.
     */
    getPath(): string;
    /**
     * The unparsed query of the request.
     *
     * Excludes the leading `?`.
     */
    getQuery(): string;
    /**
     * The full URL of the request.
     */
    getUrl(): string;
    /**
     * The headers of the request.
     *
     * Header names are case-insensitive.
     * Each header might have multiple values.
     *
     * @example
     * ```json
     * {
     *   "Host": ["caido.io"],
     *   "Connection": ["keep-alive"],
     *   "Content-Length": ["95"]
     * }
     * ```
     */
    getHeaders(): Record<string, Array<string>>;
    /**
     * Get a header value.
     *
     * Header name is case-insensitive.
     * The header might have multiple values.
     */
    getHeader(name: string): Array<string> | undefined;
    /**
     * The body of the request.
     */
    getBody(): Body | undefined;
    /**
     * The raw version of the request.
     *
     * Used to access the bytes directly.
     */
    getRaw(): RequestRaw;
    /**
     * The datetime the request was recorded by the proxy.
     */
    getCreatedAt(): Date;
    /**
     * Copied the request to a mutable un-saved {@link RequestSpec}.
     * This enables you to make modify a request before re-sending it.
     */
    toSpec(): RequestSpec;
    /**
     * Copied the request to a mutable un-saved {@link RequestSpecRaw}.
     * The raw requests are not parsed and can be used to send invalid HTTP Requests.
     */
    toSpecRaw(): RequestSpecRaw;
  };



   /**
   * An immutable saved Response.
   * @category Requests
   */
  export type Response = {
    /**
     * The unique Caido {@link ID} of the response.
     */
    getId(): ID;
    /**
     * The status code of the response.
     */
    getCode(): number;
    /**
     * The headers of the response.
     *
     * Header names are case-insensitive.
     * Each header might have multiple values.
     *
     * @example
     * ```json
     * {
     *   "Date": ["Sun, 26 May 2024 10:59:21 GMT"],
     *   "Content-Type": ["text/html"]
     * }
     * ```
     */
    getHeaders(): Record<string, Array<string>>;
    /**
     * Get a header value.
     *
     * Header name is case-insensitive.
     * The header might have multiple values.
     */
    getHeader(name: string): Array<string> | undefined;
    /**
     * The body of the response
     */
    getBody(): Body | undefined;
    /**
     * The raw version of the response.
     *
     * Used to access the bytes directly.
     */
    getRaw(): ResponseRaw;
    /**
     * The time it took to send the request and receive the response in milliseconds.
     */
    getRoundtripTime(): number;
    /**
     * The datetime the response was recorded by the proxy.
     */
    getCreatedAt(): Date;
  };


  For Body, Raw you can do stuff like getBody().toText()
